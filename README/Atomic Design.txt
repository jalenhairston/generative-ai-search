Atomic Design is a methodology born of a need for an efficient way to develop modern web applications, with their ever-evolving complexity and scope of features. It informs the ways organizations design, iterate, and communicate throughout their project's process as much as it informs the project itself. Applicable for all types of interfaces, it follows the approach of modularizing content to manage the need to reach consumers responsively - things like different devices and languages contribute to an "increasingly diverse and eclectic digital landscape" that requires development to take a more functional approach. It applies separation of concerns to the visual layer of an application by breaking down the elements of an interface into self contained pieces of functionality that come together when put into context. According to atomic design, the result of a well designed interface is a system that contains resusable, efficient, and modular components and yet is easily understood, tested, and maintained.

As a methodology, it is important that atomic design is communicated and understood among developers on a project or in an organization, as it is meant to promote consistency across a project. For the purposes of this article, the names of atomic design elements used will adhere to the book "Atomic Design" written by Brad Frost. However, as long as they are understood and agreed upon, the names given to these design elements are not rigid and an organization may implement whichever names they choose, as it is the details of atomic design that claim greater importance.

For the overwhelming majority of the web's history (and human history, according to Frost), the primary container for content, information, etc has been the page. Web content, book content, articles, magazines, and visual elements are predominatly organized into pages and have been for centuries. Atomic design recognizes, however, that pages aren't very useful context for development teams when the content and functionality of a page can vary dramatically. This means a page can be very simple and take a few hours or days to complete and refine, or a page can be very complex and take months to complete. Atomic design chiefly provides new language for development teams to use that breaks away from the abstract "page" and focuses more on the content and functionality involved. Addressing modularity, it breaks down interfaces into the smallest bits of functionality to promote their reusability. Elements, Atoms, Molecules, and Templates are added to the vocabulary, each component comprised of smaller components in an interface design hierarchy that makes the final product easily understood, presented, and reprogrammed if necessary. While planning and designing a project this way can require a lot of effort in the beginning stages, fleshing out how all the pieces come together, development in this fashion picks up swiftly once components are able to be reused with complete functionality, making it easier to extend a project's scope or iteratively update the solution.

Elements in the context of Atomic Design are most commonly HTML elements, the true lowest level on a Document Object
Model such as <label>, <input>, and <button>. They are a finite set used directly and independently with pre-defined
functionalities, and all applications make use of the same HTML elements.

Atoms represent applications of elements at their most fundamental level. They commonly will contain only one element,
its functionality, and style associated. Atoms consist of HTML elements such as buttons, inputs, paragraphs, etc with
content and style applied. When seeing all the atoms at a glance one understands the base components used and how their
styling commuincates tone, but atoms do not contribute to very much meaningful functionality on their own.

Molecules, recognized in chemistry as groups of atoms bonded in a particular way, is a fitting analogy for the next
level of encapsulation. When molecules form from atoms, they take on their own distint properties. Much in the same way,
molecules built from interface atoms give more meaning and context to the individual parts. From Frost, they are
"relatively simple groups of UI elements functioning together as a unit". For example, a search form molecule can be
comprised of a form label, search input, and a submit button as atoms. The atoms are given greater purpose when they are
combined in this manner. The idea is to create molecules that adhere to the single responsibility principle - that is,
they encapsulate a single piece of functionality.

Organisms are the next level in the atomic design hierarchy, which provide even broader context for the molecules
involved. They can contain molecules with different, unrelated functionalities, or contain many instances of the same
molecule.

Templates organize the organisims into a coherent user view. They inform the layout of the content, and provide an
effective demonstration for how the components will look and feel in the final product. The crucial difference between
a template and a page is that templates are concerned with the underlying structure of the content, not just the final
content itself. Therefore, a template is responsive when different content is applied - different user views, for
example, between users and administrators.

Finally, pages are specific instances of a template with real content applied, and communicate the final user view.
They are the applications that demonstrate how well the design systems hold up, and are the most concrete part of the
design process, the part that users will see.

Overall, atomic design carries the advantages of making it easier to develop complex interfaces over time by separating
concerns wherever possible. When something is not as it should be, it is easier to investigate whether it is an issue
of a particular component or the whole, and whether it is structure related or content related. It is not meant to be
implemented linearly from atoms up to pages, but more as a mental model to help developers focus on the underlying
systems of a UI, and  how the UI elements combine to compose the full picture.



